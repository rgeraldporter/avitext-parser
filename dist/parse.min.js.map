{"version":3,"sources":["functional.js","parse.js"],"names":["$__System","registerDynamic","$__require","exports","module","_typeof","Symbol","iterator","obj","constructor","fjs","hardReturn","lambda","exp","isString","parts","match","shift","params","replace","split","body","test","push","Function","apply","sliceArgs","args","length","slice","call","isFunction","isObject","isArray","Object","prototype","toString","checkFunction","func","curry","inner","_args","arguments","initial","fold","concat","each","items","exists","i","j","map","mapped","foldl","cumulate","item","reduce","reducel","foldll","clone","first","head","take","rest","tail","drop","result","select","last","itemsClone","reverse","every","all","isEvery","any","contains","isAny","filter","filtered","best","compare","arg1","arg2","this","while","compose","funcs","anyInvalid","applyEach","partition","truthy","falsy","group","shuffle","t","Math","floor","random","toArray","key","keys","assign","extend","obj1","obj2","prop","pluck","nub","unique","distinct","comparator","type","_interopRequireDefault","__esModule","default","_classCallCheck","instance","Constructor","TypeError","countNumbers","str","countMales","countMs","parseInt","countAllMales","val","prev","current","countFs","countFemales","countAllFemales","countJs","countJuveniles","countAllJuveniles","countIs","countImmatures","countAllImmatures","countAs","countAdults","countAllAdults","countUnspecified","explodeString","extractQuotes","removeQuotes","removeTaxon","substring","trimQuotes","gatherComments","getSpecies","gatherCount","taxon","Count","of","males","breakOutSpecies","females","unspecified","juveniles","immatures","adults","defineProperty","value","undefined","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","_functional","_functional2","memoize","fn","cache","_len","Array","_key","stringifiedArgs","JSON","stringify","x","__value","f","isNothing","_breakOutSpecies"],"mappings":"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","file":"parse.min.js","sourceRoot":"/source/","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar fjs = function () {\n    \"use strict\";\n\n    var fjs = {},\n        hardReturn = \"hardReturn;\";\n\n    var lambda = function lambda(exp) {\n        if (!fjs.isString(exp)) {\n            return;\n        }\n\n        var parts = exp.match(/(.*)\\s*[=-]>\\s*(.*)/);\n        parts.shift();\n\n        var params = parts.shift().replace(/^\\s*|\\s(?=\\s)|\\s*$|,/g, \"\").split(\" \");\n        var body = parts.shift();\n\n        parts = (!/\\s*return\\s+/.test(body) ? \"return \" : \"\") + body;\n        params.push(parts);\n\n        return Function.apply({}, params);\n    };\n\n    var sliceArgs = function sliceArgs(args) {\n        return args.length > 0 ? [].slice.call(args, 0) : [];\n    };\n\n    fjs.isFunction = function (obj) {\n        return !!(obj && obj.constructor && obj.call && obj.apply);\n    };\n\n    fjs.isObject = function (obj) {\n        return fjs.isFunction(obj) || !!obj && (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\";\n    };\n\n    fjs.isArray = function (obj) {\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n\n    var checkFunction = function checkFunction(func) {\n        if (!fjs.isFunction(func)) {\n            func = lambda(func);\n            if (!fjs.isFunction(func)) {\n                throw \"fjs Error: Invalid function\";\n            }\n        }\n        return func;\n    };\n\n    fjs.curry = function (func) {\n        func = checkFunction(func);\n        return function inner() {\n            var _args = sliceArgs(arguments);\n            if (_args.length === func.length) {\n                return func.apply(null, _args);\n            } else if (_args.length > func.length) {\n                var initial = func.apply(null, _args);\n                return fjs.fold(func, initial, _args.slice(func.length));\n            } else {\n                return function () {\n                    var args = sliceArgs(arguments);\n                    return inner.apply(null, _args.concat(args));\n                };\n            }\n        };\n    };\n\n    fjs.each = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        if (!fjs.exists(items) || !fjs.isArray(items)) {\n            return;\n        }\n        for (var i = 0, j = items.length; i < j; i += 1) {\n            if (iterator.call(null, items[i], i) === hardReturn) {\n                return;\n            }\n        }\n    });\n\n    fjs.map = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var mapped = [];\n        fjs.each(function () {\n            mapped.push(iterator.apply(null, arguments));\n        }, items);\n        return mapped;\n    });\n\n    fjs.fold = fjs.foldl = fjs.curry(function (iterator, cumulate, items) {\n        iterator = checkFunction(iterator);\n        fjs.each(function (item, i) {\n            cumulate = iterator.call(null, cumulate, item, i);\n        }, items);\n        return cumulate;\n    });\n\n    fjs.reduce = fjs.reducel = fjs.foldll = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var cumulate = items[0];\n        items.shift();\n        return fjs.fold(iterator, cumulate, items);\n    });\n\n    fjs.clone = function (items) {\n        var clone = [];\n        fjs.each(function (item) {\n            clone.push(item);\n        }, items);\n        return clone;\n    };\n\n    fjs.first = fjs.head = fjs.take = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var first;\n        fjs.each(function (item) {\n            if (iterator.call(null, item)) {\n                first = item;\n                return hardReturn;\n            }\n        }, items);\n        return first;\n    });\n\n    fjs.rest = fjs.tail = fjs.drop = fjs.curry(function (iterator, items) {\n        var result = fjs.select(iterator, items);\n        result.shift();\n        return result;\n    });\n\n    fjs.last = fjs.curry(function (iterator, items) {\n        var itemsClone = fjs.clone(items);\n        return fjs.first(iterator, itemsClone.reverse());\n    });\n\n    fjs.every = fjs.all = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var isEvery = true;\n        fjs.each(function (item) {\n            if (!iterator.call(null, item)) {\n                isEvery = false;\n                return hardReturn;\n            }\n        }, items);\n        return isEvery;\n    });\n\n    fjs.any = fjs.contains = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var isAny = false;\n        fjs.each(function (item) {\n            if (iterator.call(null, item)) {\n                isAny = true;\n                return hardReturn;\n            }\n        }, items);\n        return isAny;\n    });\n\n    fjs.select = fjs.filter = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var filtered = [];\n        fjs.each(function (item) {\n            if (iterator.call(null, item)) {\n                filtered.push(item);\n            }\n        }, items);\n        return filtered;\n    });\n\n    fjs.best = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var compare = function compare(arg1, arg2) {\n            return iterator.call(this, arg1, arg2) ? arg1 : arg2;\n        };\n        return fjs.reduce(compare, items);\n    });\n\n    fjs.while = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var result = [];\n        fjs.each(function (item) {\n            if (iterator.call(null, item)) {\n                result.push(item);\n            } else {\n                return hardReturn;\n            }\n        }, items);\n        return result;\n    });\n\n    fjs.compose = function (funcs) {\n        var anyInvalid = fjs.any(function (func) {\n            return !fjs.isFunction(func);\n        });\n        funcs = sliceArgs(arguments).reverse();\n        if (anyInvalid(funcs)) {\n            throw \"fjs Error: Invalid function to compose\";\n        }\n        return function () {\n            var args = arguments;\n            var applyEach = fjs.each(function (func) {\n                args = [func.apply(null, args)];\n            });\n            applyEach(funcs);\n            return args[0];\n        };\n    };\n\n    fjs.partition = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var truthy = [],\n            falsy = [];\n        fjs.each(function (item) {\n            (iterator.call(null, item) ? truthy : falsy).push(item);\n        }, items);\n        return [truthy, falsy];\n    });\n\n    fjs.group = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var result = {};\n        var group;\n        fjs.each(function (item) {\n            group = iterator.call(null, item);\n            result[group] = result[group] || [];\n            result[group].push(item);\n        }, items);\n        return result;\n    });\n\n    fjs.shuffle = function (items) {\n        var j, t;\n        fjs.each(function (item, i) {\n            j = Math.floor(Math.random() * (i + 1));\n            t = items[i];\n            items[i] = items[j];\n            items[j] = t;\n        }, items);\n        return items;\n    };\n\n    fjs.toArray = function (obj) {\n        return fjs.map(function (key) {\n            return [key, obj[key]];\n        }, Object.keys(obj));\n    };\n\n    fjs.apply = fjs.curry(function (func, items) {\n        var args = [];\n        if (fjs.isArray(func)) {\n            args = [].slice.call(func, 1);\n            func = func[0];\n        }\n        return fjs.map(function (item) {\n            return item[func].apply(item, args);\n        }, items);\n    });\n\n    fjs.assign = fjs.extend = fjs.curry(function (obj1, obj2) {\n        fjs.each(function (key) {\n            obj2[key] = obj1[key];\n        }, Object.keys(obj1));\n        return obj2;\n    });\n\n    fjs.prop = function (prop) {\n        return function (obj) {\n            return obj[prop];\n        };\n    };\n\n    fjs.pluck = fjs.curry(function (prop, items) {\n        return fjs.map(fjs.prop(prop), items);\n    });\n\n    fjs.nub = fjs.unique = fjs.distinct = fjs.curry(function (comparator, items) {\n        var unique = items.length > 0 ? [items[0]] : [];\n\n        fjs.each(function (item) {\n            if (!fjs.any(fjs.curry(comparator)(item), unique)) {\n                unique[unique.length] = item;\n            }\n        }, items);\n\n        return unique;\n    });\n\n    fjs.exists = function (obj) {\n        return obj != null; // jshint ignore:line\n    };\n\n    fjs.truthy = function (obj) {\n        return fjs.exists(obj) && obj !== false;\n    };\n\n    fjs.falsy = function (obj) {\n        return !fjs.truthy(obj);\n    };\n\n    fjs.each(function (type) {\n        fjs[\"is\" + type] = function (obj) {\n            return Object.prototype.toString.call(obj) === \"[object \" + type + \"]\";\n        };\n    }, [\"Arguments\", \"Date\", \"Number\", \"RegExp\", \"String\"]);\n\n    return fjs;\n}();\n\nif (typeof exports !== \"undefined\") {\n    if (typeof module !== \"undefined\" && module.exports) {\n        exports = module.exports = fjs;\n    }\n    exports.fjs = fjs;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.explodeString = exports.gatherCount = exports.Count = exports.removeQuotes = exports.gatherComments = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _functional = require('functional.js');\n\nvar _functional2 = _interopRequireDefault(_functional);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar memoize = function memoize(fn) {\n\n    var cache = {};\n    return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var stringifiedArgs = JSON.stringify(args);\n        var result = cache[stringifiedArgs] = cache[stringifiedArgs] || fn.apply(undefined, args);\n        return result;\n    };\n};\n\nvar Count = function () {\n    function Count(x) {\n        _classCallCheck(this, Count);\n\n        this.__value = x;\n    }\n\n    _createClass(Count, [{\n        key: 'map',\n        value: function map(f) {\n\n            return this.isNothing() ? Count.of(null) : Count.of(f(this.__value));\n        }\n    }, {\n        key: 'isNothing',\n        value: function isNothing() {\n\n            return this.__value === null || this.__value === undefined;\n        }\n    }]);\n\n    return Count;\n}();\n\nCount.of = function (x) {\n    return new Count(x);\n};\n\nfunction countNumbers(str) {\n\n    return str.replace(/\\D/g, '') || 0;\n}\n\n// males\n\nfunction countMales(str) {\n\n    return countMs(str) === 1 ? parseInt(countNumbers(str)) || 1 : countMs(str);\n}\n\nfunction countMs(str) {\n\n    return parseInt((str.match(/m/g) || []).length);\n}\n\nfunction countAllMales(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countMales(current);\n    }, 0);\n}\n\n// females\n\nfunction countFs(str) {\n\n    return parseInt((str.match(/f/g) || []).length);\n}\n\nfunction countFemales(str) {\n\n    return countFs(str) === 1 ? parseInt(countNumbers(str)) || 1 : countFs(str);\n}\n\nfunction countAllFemales(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countFemales(current);\n    }, 0);\n}\n\n// juveniles\n\nfunction countJs(str) {\n\n    return parseInt((str.match(/j/g) || []).length);\n}\n\nfunction countJuveniles(str) {\n\n    return countJs(str) === 1 ? parseInt(countNumbers(str)) || 1 : 0;\n}\n\nfunction countAllJuveniles(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countJuveniles(current);\n    }, 0);\n}\n\n// immatures\n\nfunction countIs(str) {\n\n    return parseInt((str.match(/i/g) || []).length);\n}\n\nfunction countImmatures(str) {\n\n    return countIs(str) === 1 ? parseInt(countNumbers(str)) || 1 : 0;\n}\n\nfunction countAllImmatures(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countImmatures(current);\n    }, 0);\n}\n\n// adults\n\nfunction countAs(str) {\n\n    return parseInt((str.match(/a/g) || []).length);\n}\n\nfunction countAdults(str) {\n\n    return countAs(str) === 1 ? parseInt(countNumbers(str)) || 1 : 0;\n}\n\nfunction countAllAdults(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countAdults(current);\n    }, 0);\n}\n\n// unspecifieds\n\nfunction countUnspecified(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + (/[^$,\\.\\d]/.test(current) ? 0 : parseInt(countNumbers(current)));\n    }, 0);\n}\n\n// combos\n\nfunction countCombo(val) {\n\n    return val.reduce(function (prev, current) {\n\n        var count = 0;\n\n        // adult male/females\n        if (countAs(current) === 1 && (countFs(current) === 1 || countMs(current) === 1)) {\n\n            prev.adults.males = countNumbers(current);\n        } else if (countIs(current) === 1 && (countFs(current) === 1 || countMs(current) === 1)) {\n\n            prev.immatures.females = countNumbers(current);\n        }\n\n        return prev;\n    }, {\n        adults: { males: 0, females: 0 },\n        immatures: { males: 0, females: 0 }\n    });\n}\n\nfunction explodeString(str) {\n\n    return str ? str.split(' ') : null;\n}\n\nfunction extractQuotes(str) {\n\n    return str.match(/(['\"])((\\\\\\1|.)*?)\\1/gm);\n}\n\nfunction removeQuotes(str) {\n\n    return str.replace(/(['\"])((\\\\\\1|.)*?)\\1/gm, '');\n}\n\nfunction removeTaxon(str) {\n\n    return str.substring(4);\n}\n\nfunction trimQuotes(str) {\n\n    return str ? str.slice(0, -1).substring(1) : null;\n}\n\nfunction gatherComments(str) {\n\n    return extractQuotes(str).map(trimQuotes);\n}\n\nfunction getSpecies(str) {\n\n    return str.substring(0, 4);\n}\n\nvar _breakOutSpecies = _functional2.default.compose(explodeString, removeQuotes, removeTaxon);\nvar breakOutSpecies = memoize(_breakOutSpecies);\n\nfunction gatherCount(str) {\n\n    return {\n        taxon: Count.of(getSpecies(str)),\n        males: Count.of(breakOutSpecies(str)).map(countAllMales),\n        females: Count.of(breakOutSpecies(str)).map(countAllFemales),\n        unspecified: Count.of(breakOutSpecies(str)).map(countUnspecified),\n        juveniles: Count.of(breakOutSpecies(str)).map(countAllJuveniles),\n        immatures: Count.of(breakOutSpecies(str)).map(countAllImmatures),\n        adults: Count.of(breakOutSpecies(str)).map(countAllAdults)\n    };\n}\n\nexports.gatherComments = gatherComments;\nexports.removeQuotes = removeQuotes;\nexports.Count = Count;\nexports.gatherCount = gatherCount;\nexports.explodeString = explodeString;"]}