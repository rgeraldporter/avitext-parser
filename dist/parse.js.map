{"version":3,"sources":["functional.js","parse.js"],"names":[],"mappings":";;;;AAAA;;AAAA;AACI;AAAY;AAAe;AAC/B;AAAqG;EAAmB;AAAqB;EAAkG;AAE/O;AACI;AAEA;AACI;AAEJ;AACI;AACI;MACJ;AAAA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;IACJ;AAEA;AACI;IACJ;AAEA;AACI;IACJ;AAEA;AACI;IACJ;AAEA;AACI;IACJ;AAEA;AACI;AACI;AACA;AACI;QACJ;AAAA;AACJ;IAEJ;AAEA;AACI;AACA;AACI;AACA;AACI;QACJ;AACI;AACA;QACJ;AACI;AACI;AACA;UACJ;QACJ;AAAA;IAER;AAEA;AACI;AACA;AACI;MACJ;AAAA;AACgB;AACZ;AACI;QACJ;AAAA;AACJ;AAGJ;AACI;AACA;AACA;AACI;MACJ;AACA;IACJ;AAEA;AACI;AACA;AACI;MACJ;AACA;IACJ;AAEA;AACI;AACA;AACA;AACA;IACJ;AAEA;AACI;AACA;AACI;MACJ;AACA;IACJ;AAEA;AACI;AACA;AACA;AACI;AACI;AACA;QACJ;AAAA;AAEJ;IACJ;AAEA;AACI;AACA;AACA;IACJ;AAEA;AACI;AACA;IACJ;AAEA;AACI;AACA;AACA;AACI;AACI;AACA;QACJ;AAAA;AAEJ;IACJ;AAEA;AACI;AACA;AACA;AACI;AACI;AACA;QACJ;AAAA;AAEJ;IACJ;AAEA;AACI;AACA;AACA;AACI;AACI;QACJ;AAAA;AAEJ;IACJ;AAEA;AACI;AACA;AACI;MACJ;AACA;IACJ;AAEA;AACI;AACA;AACA;AACI;AACI;QACJ;AACI;QACJ;AAAA;AAEJ;IACJ;AAEA;AACI;AACI;MACJ;AACA;AACA;AACI;MACJ;AAAA;AAEI;AACA;AACI;QACJ;AACA;AACA;MACJ;IACJ;AAEA;AACI;AACA;AACI;AACJ;AACI;MACJ;AACA;IACJ;AAEA;AACI;AACA;AACA;AACA;AACI;AACA;AACA;MACJ;AACA;IACJ;AAEA;AACI;AAAO;AACP;AACI;AACA;AACA;AACA;MACJ;AACA;IACJ;AAEA;AACI;AACI;MACJ;IACJ;AAEA;AACI;AACA;AACI;AACA;MACJ;AAAA;AAEI;MACJ;IACJ;AAEA;AACI;AACI;MACJ;AACA;IACJ;AAEA;AACI;AACI;MACJ;IACJ;AAEA;AACI;IACJ;AAEA;AACI;AAEA;AACI;AACI;QACJ;AAAA;AAGJ;IACJ;AAEA;AACI;IACJ;AAEA;AACI;IACJ;AAEA;AACI;IACJ;AAEA;AACI;AACI;MACJ;IACJ;AAEA;EACJ;AAEA;AACI;AACI;IACJ;AAAA;EAEJ;AAAA;AA7TiG;AA6TjG;AC7TA;;AAAA;AACI;AAAY;AAAe;AAC/B;AAGA;AAEA;AAAiC;AAA2C;AAAyC;AAA2B;AAAwD;AAAgC;AAA2B;AAA0B;MAA6D;AAAA;AAAE;AAA2D;AAAgB;AAAmD;AAAmB;AAA0C;IAAsB;EAAG;AAEhjB;AAEA;AAEA;AAAuC;EAAuD;AAAA;AAE5C;AAA0C;IAA0D;AAAA;AAAE;AAIpJ;AACA;AACI;AAAkC;AAAoB;AAClD;MACJ;AAAA;AAGA;AACA;IACJ;EACJ;AAEA;AACI;AACI;AAEA;IACJ;AAAA;AAGI;AACA;AAEI;MACJ;AAAA;AAEA;AACA;AAEI;MACJ;AAAA;AAGJ;EACJ;AAEA;AACI;EACJ;AAEA;AAEI;EACJ;AAAA;AAMI;EACJ;AAAA;AAII;EACJ;AAAA;AAII;AAEI;IACJ;EACJ;AAAA;AAMI;EACJ;AAAA;AAII;EACJ;AAAA;AAII;AAEI;IACJ;EACJ;AAAA;AAMI;EACJ;AAAA;AAII;EACJ;AAAA;AAII;AAEI;IACJ;EACJ;AAAA;AAMI;EACJ;AAAA;AAII;EACJ;AAAA;AAII;AAEI;IACJ;EACJ;AAAA;AAMI;EACJ;AAAA;AAII;EACJ;AAAA;AAII;AAEI;IACJ;EACJ;AAAA;AAMI;AAEI;IACJ;EACJ;AAAA;AAMI;AAEI;AAGA;AAEI;MACJ;AAEI;MACJ;AAAA;IAGJ;AACI;AAAU;AAAU;AAAS;AAC7B;AAAa;AAAU;AAAS;AAAE;EAE1C;AAAA;AAII;EACJ;AAAA;AAII;EACJ;AAAA;AAII;EACJ;AAAA;AAII;EACJ;AAAA;AAII;EACJ;AAAA;AAII;EACJ;AAAA;AAII;EACJ;AAAA;AAGA;AAEA;AAEI;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AAAyD;EAEjE;AAAA;AAGA;AACA;AACA;AACA;AA7PA;AAAoG;AA6P/D","file":"parse.js","sourceRoot":"/source/","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar fjs = function () {\n    \"use strict\";\n\n    var fjs = {},\n        hardReturn = \"hardReturn;\";\n\n    var lambda = function lambda(exp) {\n        if (!fjs.isString(exp)) {\n            return;\n        }\n\n        var parts = exp.match(/(.*)\\s*[=-]>\\s*(.*)/);\n        parts.shift();\n\n        var params = parts.shift().replace(/^\\s*|\\s(?=\\s)|\\s*$|,/g, \"\").split(\" \");\n        var body = parts.shift();\n\n        parts = (!/\\s*return\\s+/.test(body) ? \"return \" : \"\") + body;\n        params.push(parts);\n\n        return Function.apply({}, params);\n    };\n\n    var sliceArgs = function sliceArgs(args) {\n        return args.length > 0 ? [].slice.call(args, 0) : [];\n    };\n\n    fjs.isFunction = function (obj) {\n        return !!(obj && obj.constructor && obj.call && obj.apply);\n    };\n\n    fjs.isObject = function (obj) {\n        return fjs.isFunction(obj) || !!obj && (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\";\n    };\n\n    fjs.isArray = function (obj) {\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n\n    var checkFunction = function checkFunction(func) {\n        if (!fjs.isFunction(func)) {\n            func = lambda(func);\n            if (!fjs.isFunction(func)) {\n                throw \"fjs Error: Invalid function\";\n            }\n        }\n        return func;\n    };\n\n    fjs.curry = function (func) {\n        func = checkFunction(func);\n        return function inner() {\n            var _args = sliceArgs(arguments);\n            if (_args.length === func.length) {\n                return func.apply(null, _args);\n            } else if (_args.length > func.length) {\n                var initial = func.apply(null, _args);\n                return fjs.fold(func, initial, _args.slice(func.length));\n            } else {\n                return function () {\n                    var args = sliceArgs(arguments);\n                    return inner.apply(null, _args.concat(args));\n                };\n            }\n        };\n    };\n\n    fjs.each = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        if (!fjs.exists(items) || !fjs.isArray(items)) {\n            return;\n        }\n        for (var i = 0, j = items.length; i < j; i += 1) {\n            if (iterator.call(null, items[i], i) === hardReturn) {\n                return;\n            }\n        }\n    });\n\n    fjs.map = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var mapped = [];\n        fjs.each(function () {\n            mapped.push(iterator.apply(null, arguments));\n        }, items);\n        return mapped;\n    });\n\n    fjs.fold = fjs.foldl = fjs.curry(function (iterator, cumulate, items) {\n        iterator = checkFunction(iterator);\n        fjs.each(function (item, i) {\n            cumulate = iterator.call(null, cumulate, item, i);\n        }, items);\n        return cumulate;\n    });\n\n    fjs.reduce = fjs.reducel = fjs.foldll = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var cumulate = items[0];\n        items.shift();\n        return fjs.fold(iterator, cumulate, items);\n    });\n\n    fjs.clone = function (items) {\n        var clone = [];\n        fjs.each(function (item) {\n            clone.push(item);\n        }, items);\n        return clone;\n    };\n\n    fjs.first = fjs.head = fjs.take = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var first;\n        fjs.each(function (item) {\n            if (iterator.call(null, item)) {\n                first = item;\n                return hardReturn;\n            }\n        }, items);\n        return first;\n    });\n\n    fjs.rest = fjs.tail = fjs.drop = fjs.curry(function (iterator, items) {\n        var result = fjs.select(iterator, items);\n        result.shift();\n        return result;\n    });\n\n    fjs.last = fjs.curry(function (iterator, items) {\n        var itemsClone = fjs.clone(items);\n        return fjs.first(iterator, itemsClone.reverse());\n    });\n\n    fjs.every = fjs.all = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var isEvery = true;\n        fjs.each(function (item) {\n            if (!iterator.call(null, item)) {\n                isEvery = false;\n                return hardReturn;\n            }\n        }, items);\n        return isEvery;\n    });\n\n    fjs.any = fjs.contains = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var isAny = false;\n        fjs.each(function (item) {\n            if (iterator.call(null, item)) {\n                isAny = true;\n                return hardReturn;\n            }\n        }, items);\n        return isAny;\n    });\n\n    fjs.select = fjs.filter = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var filtered = [];\n        fjs.each(function (item) {\n            if (iterator.call(null, item)) {\n                filtered.push(item);\n            }\n        }, items);\n        return filtered;\n    });\n\n    fjs.best = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var compare = function compare(arg1, arg2) {\n            return iterator.call(this, arg1, arg2) ? arg1 : arg2;\n        };\n        return fjs.reduce(compare, items);\n    });\n\n    fjs.while = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var result = [];\n        fjs.each(function (item) {\n            if (iterator.call(null, item)) {\n                result.push(item);\n            } else {\n                return hardReturn;\n            }\n        }, items);\n        return result;\n    });\n\n    fjs.compose = function (funcs) {\n        var anyInvalid = fjs.any(function (func) {\n            return !fjs.isFunction(func);\n        });\n        funcs = sliceArgs(arguments).reverse();\n        if (anyInvalid(funcs)) {\n            throw \"fjs Error: Invalid function to compose\";\n        }\n        return function () {\n            var args = arguments;\n            var applyEach = fjs.each(function (func) {\n                args = [func.apply(null, args)];\n            });\n            applyEach(funcs);\n            return args[0];\n        };\n    };\n\n    fjs.partition = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var truthy = [],\n            falsy = [];\n        fjs.each(function (item) {\n            (iterator.call(null, item) ? truthy : falsy).push(item);\n        }, items);\n        return [truthy, falsy];\n    });\n\n    fjs.group = fjs.curry(function (iterator, items) {\n        iterator = checkFunction(iterator);\n        var result = {};\n        var group;\n        fjs.each(function (item) {\n            group = iterator.call(null, item);\n            result[group] = result[group] || [];\n            result[group].push(item);\n        }, items);\n        return result;\n    });\n\n    fjs.shuffle = function (items) {\n        var j, t;\n        fjs.each(function (item, i) {\n            j = Math.floor(Math.random() * (i + 1));\n            t = items[i];\n            items[i] = items[j];\n            items[j] = t;\n        }, items);\n        return items;\n    };\n\n    fjs.toArray = function (obj) {\n        return fjs.map(function (key) {\n            return [key, obj[key]];\n        }, Object.keys(obj));\n    };\n\n    fjs.apply = fjs.curry(function (func, items) {\n        var args = [];\n        if (fjs.isArray(func)) {\n            args = [].slice.call(func, 1);\n            func = func[0];\n        }\n        return fjs.map(function (item) {\n            return item[func].apply(item, args);\n        }, items);\n    });\n\n    fjs.assign = fjs.extend = fjs.curry(function (obj1, obj2) {\n        fjs.each(function (key) {\n            obj2[key] = obj1[key];\n        }, Object.keys(obj1));\n        return obj2;\n    });\n\n    fjs.prop = function (prop) {\n        return function (obj) {\n            return obj[prop];\n        };\n    };\n\n    fjs.pluck = fjs.curry(function (prop, items) {\n        return fjs.map(fjs.prop(prop), items);\n    });\n\n    fjs.nub = fjs.unique = fjs.distinct = fjs.curry(function (comparator, items) {\n        var unique = items.length > 0 ? [items[0]] : [];\n\n        fjs.each(function (item) {\n            if (!fjs.any(fjs.curry(comparator)(item), unique)) {\n                unique[unique.length] = item;\n            }\n        }, items);\n\n        return unique;\n    });\n\n    fjs.exists = function (obj) {\n        return obj != null; // jshint ignore:line\n    };\n\n    fjs.truthy = function (obj) {\n        return fjs.exists(obj) && obj !== false;\n    };\n\n    fjs.falsy = function (obj) {\n        return !fjs.truthy(obj);\n    };\n\n    fjs.each(function (type) {\n        fjs[\"is\" + type] = function (obj) {\n            return Object.prototype.toString.call(obj) === \"[object \" + type + \"]\";\n        };\n    }, [\"Arguments\", \"Date\", \"Number\", \"RegExp\", \"String\"]);\n\n    return fjs;\n}();\n\nif (typeof exports !== \"undefined\") {\n    if (typeof module !== \"undefined\" && module.exports) {\n        exports = module.exports = fjs;\n    }\n    exports.fjs = fjs;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.explodeString = exports.gatherCount = exports.Count = exports.removeQuotes = exports.gatherComments = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _functional = require('functional.js');\n\nvar _functional2 = _interopRequireDefault(_functional);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar memoize = function memoize(fn) {\n\n    var cache = {};\n    return function () {\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var stringifiedArgs = JSON.stringify(args);\n        var result = cache[stringifiedArgs] = cache[stringifiedArgs] || fn.apply(undefined, args);\n        return result;\n    };\n};\n\nvar Count = function () {\n    function Count(x) {\n        _classCallCheck(this, Count);\n\n        this.__value = x;\n    }\n\n    _createClass(Count, [{\n        key: 'map',\n        value: function map(f) {\n\n            return this.isNothing() ? Count.of(null) : Count.of(f(this.__value));\n        }\n    }, {\n        key: 'isNothing',\n        value: function isNothing() {\n\n            return this.__value === null || this.__value === undefined;\n        }\n    }]);\n\n    return Count;\n}();\n\nCount.of = function (x) {\n    return new Count(x);\n};\n\nfunction countNumbers(str) {\n\n    return str.replace(/\\D/g, '') || 0;\n}\n\n// males\n\nfunction countMales(str) {\n\n    return countMs(str) === 1 ? parseInt(countNumbers(str)) || 1 : countMs(str);\n}\n\nfunction countMs(str) {\n\n    return parseInt((str.match(/m/g) || []).length);\n}\n\nfunction countAllMales(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countMales(current);\n    }, 0);\n}\n\n// females\n\nfunction countFs(str) {\n\n    return parseInt((str.match(/f/g) || []).length);\n}\n\nfunction countFemales(str) {\n\n    return countFs(str) === 1 ? parseInt(countNumbers(str)) || 1 : countFs(str);\n}\n\nfunction countAllFemales(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countFemales(current);\n    }, 0);\n}\n\n// juveniles\n\nfunction countJs(str) {\n\n    return parseInt((str.match(/j/g) || []).length);\n}\n\nfunction countJuveniles(str) {\n\n    return countJs(str) === 1 ? parseInt(countNumbers(str)) || 1 : 0;\n}\n\nfunction countAllJuveniles(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countJuveniles(current);\n    }, 0);\n}\n\n// immatures\n\nfunction countIs(str) {\n\n    return parseInt((str.match(/i/g) || []).length);\n}\n\nfunction countImmatures(str) {\n\n    return countIs(str) === 1 ? parseInt(countNumbers(str)) || 1 : 0;\n}\n\nfunction countAllImmatures(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countImmatures(current);\n    }, 0);\n}\n\n// adults\n\nfunction countAs(str) {\n\n    return parseInt((str.match(/a/g) || []).length);\n}\n\nfunction countAdults(str) {\n\n    return countAs(str) === 1 ? parseInt(countNumbers(str)) || 1 : 0;\n}\n\nfunction countAllAdults(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + countAdults(current);\n    }, 0);\n}\n\n// unspecifieds\n\nfunction countUnspecified(val) {\n\n    return val.reduce(function (prev, current) {\n\n        return parseInt(prev) + (/[^$,\\.\\d]/.test(current) ? 0 : parseInt(countNumbers(current)));\n    }, 0);\n}\n\n// combos\n\nfunction countCombo(val) {\n\n    return val.reduce(function (prev, current) {\n\n        var count = 0;\n\n        // adult male/females\n        if (countAs(current) === 1 && (countFs(current) === 1 || countMs(current) === 1)) {\n\n            prev.adults.males = countNumbers(current);\n        } else if (countIs(current) === 1 && (countFs(current) === 1 || countMs(current) === 1)) {\n\n            prev.immatures.females = countNumbers(current);\n        }\n\n        return prev;\n    }, {\n        adults: { males: 0, females: 0 },\n        immatures: { males: 0, females: 0 }\n    });\n}\n\nfunction explodeString(str) {\n\n    return str ? str.split(' ') : null;\n}\n\nfunction extractQuotes(str) {\n\n    return str.match(/(['\"])((\\\\\\1|.)*?)\\1/gm);\n}\n\nfunction removeQuotes(str) {\n\n    return str.replace(/(['\"])((\\\\\\1|.)*?)\\1/gm, '');\n}\n\nfunction removeTaxon(str) {\n\n    return str.substring(4);\n}\n\nfunction trimQuotes(str) {\n\n    return str ? str.slice(0, -1).substring(1) : null;\n}\n\nfunction gatherComments(str) {\n\n    return extractQuotes(str).map(trimQuotes);\n}\n\nfunction getSpecies(str) {\n\n    return str.substring(0, 4);\n}\n\nvar _breakOutSpecies = _functional2.default.compose(explodeString, removeQuotes, removeTaxon);\nvar breakOutSpecies = memoize(_breakOutSpecies);\n\nfunction gatherCount(str) {\n\n    return {\n        taxon: Count.of(getSpecies(str)),\n        males: Count.of(breakOutSpecies(str)).map(countAllMales),\n        females: Count.of(breakOutSpecies(str)).map(countAllFemales),\n        unspecified: Count.of(breakOutSpecies(str)).map(countUnspecified),\n        juveniles: Count.of(breakOutSpecies(str)).map(countAllJuveniles),\n        immatures: Count.of(breakOutSpecies(str)).map(countAllImmatures),\n        adults: Count.of(breakOutSpecies(str)).map(countAllAdults)\n    };\n}\n\nexports.gatherComments = gatherComments;\nexports.removeQuotes = removeQuotes;\nexports.Count = Count;\nexports.gatherCount = gatherCount;\nexports.explodeString = explodeString;"]}